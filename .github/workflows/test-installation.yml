name: Test Package Installation
permissions:
  contents: read
on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:
  test-installation:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        install-type: [cpu, gpu]
        exclude:
          # Exclude GPU tests on macOS as it's not commonly supported
          - os: macos-latest
            install-type: gpu
          # Exclude GPU tests on Windows with Python 3.11 due to potential compatibility issues
          - os: windows-latest
            python-version: '3.11'
            install-type: gpu

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        check-latest: true

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install python3-dev

    - name: Create virtual environment
      shell: bash
      run: |
        python -m venv venv

    - name: Activate virtual environment
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          source venv/Scripts/activate
        else
          source venv/bin/activate
        fi

    - name: Upgrade pip
      shell: bash
      run: |
        python -m pip install --upgrade pip

    - name: Install package with ${{ matrix.install-type }} support
      shell: bash
      run: |
        pip install -e .[${{ matrix.install-type }}]

    - name: Run basic import test
      shell: bash
      run: |
        python -c "from laiser.skill_extractor import Skill_Extractor; print('Import successful!')"

    - name: Test GPU availability (GPU jobs only)
      if: matrix.install-type == 'gpu'
      shell: bash
      run: |
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
        if [ "$RUNNER_OS" == "Linux" ]; then
          nvidia-smi
        fi 